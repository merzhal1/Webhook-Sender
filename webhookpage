<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Discord Webhook Sender</title>
    <style>
        /* Reset default styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #ff7f50, #ff6347); /* Gradient Background */
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background-color: white;
            padding: 40px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            width: 100%;
            max-width: 700px;
            text-align: center;
            border: 1px solid #ddd;
        }

        h1 {
            font-size: 28px;
            color: #333;
            margin-bottom: 20px;
            font-weight: 600;
            background: linear-gradient(90deg, #ff7f50, #ff6347); /* Gradient Text */
            -webkit-background-clip: text;
            color: transparent;
        }

        label {
            display: block;
            margin: 12px 0 6px;
            font-size: 14px;
            font-weight: 600;
            color: #555;
            text-align: left;
        }

        input, textarea, select {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 14px;
            color: #333;
            background: linear-gradient(135deg, #f7f7f7, #ffffff); /* Gradient Background for Inputs */
            transition: all 0.3s ease;
        }

        input:focus, textarea:focus, select:focus {
            border-color: #0072ff;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 114, 255, 0.5);
            background: #f0f9ff; /* Light Blue Background on Focus */
        }

        button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #ff7f50, #ff6347); /* Vibrant Button Gradient */
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s;
        }

        button:hover {
            background: linear-gradient(135deg, #ff6347, #ff7f50); /* Button Hover Gradient */
            transform: scale(1.05);
        }

        .extra-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 20px;
        }

        .extra-options input, .extra-options select {
            width: 100%;
        }

        .message {
            margin-top: 20px;
            font-size: 16px;
            text-align: center;
        }

        .message.success {
            color: #28a745;
        }

        .message.error {
            color: #dc3545;
        }

        /* Media query for smaller screens */
        @media (max-width: 600px) {
            .container {
                padding: 25px;
            }
            h1 {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Send to Discord Webhook</h1>
        <form id="webhookForm" enctype="multipart/form-data">
            <label for="webhookUrl">Discord Webhook URL</label>
            <input type="url" id="webhookUrl" placeholder="Enter your Discord webhook URL" required>
            
            <label for="message">Message</label>
            <textarea id="message" rows="4" placeholder="Enter your message" required></textarea>

            <div class="extra-options">
                <div>
                    <label for="username">Custom Username</label>
                    <input type="text" id="username" placeholder="Optional: Custom username for bot">
                </div>
                <div>
                    <label for="avatarUrl">Avatar URL</label>
                    <input type="url" id="avatarUrl" placeholder="Optional: Avatar image URL">
                </div>
                <div>
                    <label for="tts">Text-to-Speech (TTS)</label>
                    <select id="tts">
                        <option value="false">No</option>
                        <option value="true">Yes</option>
                    </select>
                </div>
                <div>
                    <label for="file">Attach File</label>
                    <input type="file" id="file" name="file">
                </div>
            </div>

            <button type="submit">Send Message</button>
        </form>

        <div class="message" id="messageResponse"></div>
    </div>

    <script>
        document.getElementById('webhookForm').addEventListener('submit', function(event) {
            event.preventDefault();

            const webhookUrl = document.getElementById('webhookUrl').value;
            const message = document.getElementById('message').value;
            const username = document.getElementById('username').value || undefined;
            const avatarUrl = document.getElementById('avatarUrl').value || undefined;
            const tts = document.getElementById('tts').value === 'true';
            const file = document.getElementById('file').files[0];

            const formData = new FormData();
            formData.append('payload_json', JSON.stringify({
                content: message,
                username: username,
                avatar_url: avatarUrl,
                tts: tts
            }));

            if (file) {
                formData.append('file', file);
            }

            fetch(webhookUrl, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                const messageResponse = document.getElementById('messageResponse');
                if (response.ok) {
                    messageResponse.textContent = 'Message sent successfully!';
                    messageResponse.className = 'message success';
                } else {
                    messageResponse.textContent = 'Error sending message.';
                    messageResponse.className = 'message error';
                }
            })
            .catch(error => {
                const messageResponse = document.getElementById('messageResponse');
                messageResponse.textContent = 'Failed to send message. Check the webhook URL.';
                messageResponse.className = 'message error';
            });
        });
    </script>
</body>
</html>
